# -*- coding: utf-8 -*-
"""PrevisaoCopa.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W3XTF8aCAfttZ1i7OlIu8D-g0qrarEVS
"""

import pandas as pd
import numpy as np
import random
from scipy.stats import poisson

selecoes = pd.read_excel('/content/DadosCopaDoMundoQatar2022.xlsx', sheet_name = 'selecoes').set_index('Seleção')
jogos = pd.read_excel('/content/DadosCopaDoMundoQatar2022.xlsx', sheet_name = 'jogos')
selecoes.head()

jogos.head()

fifa = selecoes['PontosRankingFIFA']
fifa

# eq de reta: y - y0 = m*(x-x0)

melhor_selecao, pior_selecao = max(fifa), min(fifa)
ponto_melhor, ponto_pior = 1, 0.15
b1 = (ponto_melhor - ponto_pior) / (melhor_selecao - pior_selecao)
print(b1)
b0 = ponto_melhor - melhor_selecao*b1
print(b0)
forca = b1*fifa + b0
forca

def Pontos(gols1, gols2):
  if gols1 > gols2:
    pontos1, pontos2 = 3, 0
  if gols1 == gols2:
    pontos1, pontos2 = 1, 1
  if gols1 < gols2:
    pontos1, pontos2 = 0, 3
  return pontos1, pontos2


def MediasPoisson(selecao1, selecao2):
  '''
    essa função calcula a quanto cada equipe tem de participação na média geral de gols na copa,
    esta média geral é arbitrária mas tem embasamento em dados históricos das médias de gols nas edições de copas do mundo
  '''
  forca1 = forca[selecao1]
  forca2 = forca[selecao2]
  m_gols_jogo = 2.75
  media1 = forca1 * m_gols_jogo / (forca1+forca2)
  media2 = forca2 * m_gols_jogo / (forca1+forca2)
  return media1, media2


def DistribuicaoPlacares(media):
  '''
    probabilidade de um time x fazer 0, 1, 2, 3 gols, ...
  '''
  probs = []
  for i in range(8):
    probs.append(poisson.pmf(i, media))

  probs.append(1-sum(probs))
  probs_df = pd.Series(probs, index = ['0', '1', '2', '3', '4', '5', '6', '7', '8+'])
  return probs_df


def Jogo(selecao1, selecao2):
  media1, media2 = MediasPoisson(selecao1, selecao2)
  gols1 = int(np.random.poisson(lam = media1, size = 1)) #gera um número aleatório (gols) dada a mediaPoisson do time, size=1 significa 1 geração
  gols2 = int(np.random.poisson(lam = media2, size = 1)) 
  placar = f'{gols1} X {gols2}'
  pontos1, pontos2 = Pontos(gols1, gols2)
  saldo1 = gols1 - gols2
  saldo2 = gols2 - gols1
  if gols1 > gols2:
    res = selecao1
  if gols1 < gols2:
    res = selecao2
  if gols1 == gols2:
    res = 'empate'
  return {selecao1: [gols1, pontos1, saldo1], selecao2: [gols2, pontos2, saldo2], 'Placar': placar,
          'Resultado': res}


def ProbabilidadesPartida(selecao1, selecao2):
  media1, media2 = MediasPoisson(selecao1, selecao2)
  prob_gols1, prob_gols2 = DistribuicaoPlacares(media1), DistribuicaoPlacares(media2)
  matriz = np.outer(prob_gols1, prob_gols2) #monta a matriz de probabilidade entre os dois times
  nomes = ['0', '1', '2', '3', '4', '5', '6', '7', '8+']

  #este df foi feito para visualizar qual time está em cada eixo, isso nos ajudará a com a probabilidade de vitória dos times
  matriz_df = pd.DataFrame(matriz, columns = nomes, index = nomes)
  matriz_df.index = pd.MultiIndex.from_product([[selecao1], matriz_df.index])
  matriz_df.columns = pd.MultiIndex.from_product([[selecao2], matriz_df.columns]) 

  empate = np.trace(matriz).sum() #pega a diagonal da matriz (número de gols iguais entre as equipes -> empate) e soma as probabilidades
  vitoria1 = np.tril(matriz).sum() - empate #pega a parte inferior da matriz e tira a diagonal, depois soma as probabilidades
  vitoria2 = np.triu(matriz).sum() - empate #pega a parte superior da matriz e tira a diagonal, depois soma as probabilidades
  probs = np.around([vitoria1, empate , vitoria2], 3)
  probsp = [f'{100*i:.1f}%' for i in probs]

  output = {
      'Seleção 1': selecao1,
      f'Força - {selecao1}': forca[selecao1],
      f'Média de Poisson - {selecao1}': media1,
      'Seleção 2': selecao2,
      f'Força - {selecao2}': forca[selecao2],
      f'Média de Poisson - {selecao2}': media2,
      'Probabilidades (V1, E, V2)': probsp,
      'Matriz de Probabilidades': matriz_df
      }

  return matriz_df

media1, media2 = MediasPoisson('Brasil', 'Catar')
media1

ProbabilidadesPartida('Brasil', 'Argentina')

"""# Simular as fases da Copa

### Fase de Grupos
"""

def SimulacaoGrupos(grupo):
  times = list(selecoes[selecoes['Grupo']== grupo].index)
  time1, time2, time3, time4 = times
  jogo1 = Jogo(time1, time2)
  jogo2 = Jogo(time3, time4)
  jogo3 = Jogo(time1, time3)
  jogo4 = Jogo(time2, time4)
  jogo5 = Jogo(time1, time4)
  jogo6 = Jogo(time2, time3)

  pt1, pt2, pt3, pt4 = 0, 0, 0, 0
  gp1, gp2, gp3, gp4 = 0, 0, 0, 0
  s1, s2, s3, s4 = 0, 0, 0, 0

  gp1, pt1, s1, gp2, pt2, s2 = gp1 + jogo1[time1][0], pt1 + jogo1[time1][1], s1 + jogo1[time1][2], gp2 + jogo1[time2][0], pt2 + jogo1[time2][1], s2 + jogo1[time2][2]
  gp3, pt3, s3, gp4, pt4, s4 = gp3 + jogo2[time3][0], pt3 + jogo2[time3][1], s3 + jogo2[time3][2], gp4 + jogo2[time4][0], pt4 + jogo2[time4][1], s4 + jogo2[time4][2]
  gp1, pt1, s1, gp3, pt3, s3 = gp1 + jogo3[time1][0], pt1 + jogo3[time1][1], s1 + jogo3[time1][2], gp3 + jogo3[time3][0], pt3 + jogo3[time3][1], s3 + jogo3[time3][2]
  gp2, pt2, s2, gp4, pt4, s4 = gp2 + jogo4[time2][0], pt2 + jogo4[time2][1], s2 + jogo4[time2][2], gp4 + jogo4[time4][0], pt4 + jogo4[time4][1], s4 + jogo4[time4][2]
  gp1, pt1, s1, gp4, pt4, s4 = gp1 + jogo5[time1][0], pt1 + jogo5[time1][1], s1 + jogo5[time1][2], gp4 + jogo5[time4][0], pt4 + jogo5[time4][1], s4 + jogo5[time4][2]
  gp2, pt2, s2, gp3, pt3, s3 = gp2 + jogo6[time2][0], pt2 + jogo6[time2][1], s2 + jogo6[time2][2], gp3 + jogo6[time3][0], pt3 + jogo6[time3][1], s3 + jogo6[time3][2]
  
  tabela = pd.DataFrame([[pt1, s1, gp1], [pt2, s2, gp2], [pt3, s3, gp3], [pt4, s4, gp4]], index = times, columns = ['Pontos', 'Saldo de Gols', 'Gols Pró'])
  tabela = tabela.sort_values(by=['Pontos', 'Saldo de Gols', 'Gols Pró'], ascending=False)
  tabela['Posição'] = [1, 2, 3, 4]

  confrontos = [f'{time1} x {time2}', f'{time3} x {time4}', f'{time1} x {time3}', f'{time2} x {time4}', f'{time1} x {time4}', f'{time2} x {time3}']
  resultados = [jogo1['Placar'], jogo2['Placar'], jogo3['Placar'], jogo4['Placar'], jogo5['Placar'], jogo6['Placar']]

  partidas = pd.DataFrame([resultados], index = ['Resultados'], columns=confrontos).T
  return tabela, partidas

grupo = SimulacaoGrupos('G')
display(grupo[0])
display(grupo[1])

"""### Segunda Fase

Criação do armazenamento das informações
"""

cols = ['1st', '2nd', '3th', '4th', 'Oitavas', 'Quartas', 'Semis', 'Final', 'Campeão']
n = selecoes.shape[0]
m = len(cols)
aux = np.array(np.zeros(n*m).reshape(n,m))
info = pd.DataFrame(aux, index = selecoes.index, columns = cols).astype(int)

def SimulacaoMataMata(selecao1, selecao2):
  res = Jogo(selecao1, selecao2)['Resultado']
  if res == 'empate':
    res = random.sample([selecao1, selecao2], 1)[0]
    return res
  else:
    return res

SimulacaoMataMata('Brasil', 'França')

def SimulaCopa(selecoes):
  '''
    simula uma única copa
  '''
  cols = ['1st', '2nd', '3th', '4th', 'Oitavas', 'Quartas', 'Semis', 'Final', 'Campeão']
  n = selecoes.shape[0]
  m = len(cols)
  aux = np.array(np.zeros(n*m).reshape(n,m))
  info = pd.DataFrame(aux, index = selecoes.index, columns = cols).astype(int)
  top16=[]
  for grupo in list('ABCDEFGH'):
  # realização das simulações da fase de grupos
    a = SimulacaoGrupos(grupo)[0]
    res = a.index.tolist()
    top16 += a.index[:2].tolist()

  # input dos resultados da fase de grupo e que avançaram para as oitavas
    info['1st'][res[0]] = 1
    info['2nd'][res[1]] = 1
    info['3th'][res[2]] = 1
    info['4th'][res[3]] = 1

    info['Oitavas'][info.loc[:, '1st'] == 1] = 1
    info['Oitavas'][info.loc[:, '2nd'] == 1] = 1

  # input dos dos resultados das oitavas e que avançaram para as quartas
  of1 = SimulacaoMataMata(top16[0], top16[3]) #1A x 2B
  of2 = SimulacaoMataMata(top16[4], top16[7]) #1C x 2D
  of3 = SimulacaoMataMata(top16[8], top16[11]) #1E x 2F
  of4 = SimulacaoMataMata(top16[12], top16[15]) #1G x 2H
  of5 = SimulacaoMataMata(top16[2], top16[1]) #1B x 2A
  of6 = SimulacaoMataMata(top16[6], top16[5]) #1D x 2C
  of7 = SimulacaoMataMata(top16[10], top16[9]) #1F x 2E
  of8 = SimulacaoMataMata(top16[14], top16[13]) #1H x 2G

  classificados_das_oitavas = [of1, of2, of3, of4, of5, of6, of7, of8]
  info['Quartas'][classificados_das_oitavas]=1

  # input dos dos resultados das quartas e que avançaram para as semis
  qf1 = SimulacaoMataMata(of1, of2)
  qf2 = SimulacaoMataMata(of3, of4)
  qf3 = SimulacaoMataMata(of5, of6)
  qf4 = SimulacaoMataMata(of7, of8)

  classificados_das_quartas = [qf1, qf2, qf3, qf4]
  info['Semis'][classificados_das_quartas]=1

  # input dos dos resultados das semis e que avançaram para a final
  sf1 = SimulacaoMataMata(qf1, qf2)
  sf2 = SimulacaoMataMata(qf3, qf4)

  classificados_das_semis = [sf1, sf2]
  info['Final'][classificados_das_semis]=1

  # input dos dos resultados da final e que foi campeão
  final = SimulacaoMataMata(sf1, sf2)

  campeao = final
  info['Campeão'][campeao]=1


  return info

def SimulacaoMassa(dados, S):
  print('Iniciando as simulações:')
  info = SimulaCopa(selecoes)
  for i in range(S-1):
    info += SimulaCopa(selecoes)
    if (i+2)%(S/10)==0:
      print(f'{100*(i+2)/S}% das simulações realizadas')
  print(f'{S} simulações realizadas!')
  return info.sort_values(by='Campeão', ascending = False)/S

sim = SimulacaoMassa(selecoes, 10000)

"""### Insights Extras

- Probabilidade das seleções caírem nas etapas da Copa
"""

parada = pd.DataFrame()
parada['Cair 1 fase'] = 1 - sim['Oitavas']
parada['Cair nas oitavas'] = sim['Oitavas'] - sim['Quartas']
parada['Cair nas quartas'] = sim['Quartas'] - sim['Semis']
parada['Cair nas semis'] = sim['Semis'] - sim['Final']
parada['Cair na final'] = sim['Final'] - sim['Campeão']
parada

"""- Probabilidade das seleções avançarem nas etapas da Copa"""

avanco=pd.DataFrame()
avanco['Avançar na 1 fase'] = sim['Oitavas']
avanco['Avançar nas oitavas'] = sim['Quartas'] / sim['Oitavas']
avanco['Avançar nas quartas'] = sim['Semis'] / sim['Quartas']
avanco['Avançar nas semis'] = sim['Final'] / sim['Semis']
avanco['Avançar na final'] = sim['Campeão'] / sim['Final']
avanco

with pd.ExcelWriter('outputAndamentoDasFases.xlsx') as writer:
  parada.to_excel(writer, 'Eliminações')
  avanco.to_excel(writer, 'Avanços')

